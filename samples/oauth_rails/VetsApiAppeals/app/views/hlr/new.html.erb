<h3 class='h3 text-center'>Submit <%= @schema['description'].gsub('Schema', '') %>
  for <%= @veteran.present? ? "#{@veteran.name} requested by #{@name}" : @name %></h3>

<div class="site-l-wrapper">
  <div id='root'/>
</div>

<script crossorigin src="https://unpkg.com/react@16/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@16/umd/react-dom.development.js"></script>
<script crossorigin src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.21.1/babel.min.js"></script>
<script crossorigin src="https://unpkg.com/react-jsonschema-form/dist/react-jsonschema-form.js"></script>
<script crossorigin src="https://unpkg.com/jquery@3.3.1/dist/jquery.min.js"></script>

<style>
</style>

<script type="text/babel">
  // Taken from vets-api commit ac9e199aa
  let headerSchema = {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "description": "JSON Schema for Higher-Level Review Creation endpoint headers (Decision Reviews API)",
    "$ref": "#/definitions/hlrCreateParameters",
    "definitions": {
      "hlrCreateParameters": {
        "type": "object",
        "properties": {
          "X-VA-SSN": { "$ref": "#/definitions/X-VA-SSN" },
          "X-VA-First-Name": { "$ref": "#/definitions/X-VA-First-Name" },
          "X-VA-Middle-Initial": { "$ref": "#/definitions/X-VA-Middle-Initial" },
          "X-VA-Last-Name": { "$ref": "#/definitions/X-VA-Last-Name" },
          "X-VA-Birth-Date": { "$ref": "#/definitions/X-VA-Birth-Date" },
          "X-VA-File-Number": { "$ref": "#/definitions/X-VA-File-Number" },
          "X-VA-Service-Number": { "$ref": "#/definitions/X-VA-Service-Number" },
          "X-VA-Insurance-Policy-Number": { "$ref": "#/definitions/X-VA-Insurance-Policy-Number" },
          "X-Consumer-Username": { "$ref": "#/definitions/X-Consumer-Username" }
        },
        "additionalProperties": false,
        "required": [
          "X-VA-SSN",
          "X-VA-First-Name",
          "X-VA-Last-Name",
          "X-VA-Birth-Date"
        ]
      },
      "X-VA-SSN": {
        "allOf": [
          { "description": "veteran's SSN" },
          { "type": "string", "pattern": "^[0-9]{9}$" }
        ]
      },
      "X-VA-First-Name": {
        "allOf": [
          { "description": "veteran's first name" },
          {
            "type": "string",
            "maxLength": 12,
            "$comment": "can be whitespace, to accommodate those with 1 legal name"
          }
        ]
      },
      "X-VA-Middle-Initial": {
        "allOf": [
          { "description": "veteran's middle initial" },
          { "$ref": "#/definitions/nonBlankStringMaxLength1" }
        ]
      },
      "X-VA-Last-Name": {
        "allOf": [
          { "description": "veteran's last name" },
          { "$ref": "#/definitions/nonBlankStringMaxLength18" }
        ]
      },
      "X-VA-Birth-Date": {
        "allOf": [
          { "description": "veteran's birth date" },
          {"$ref": "#/definitions/date" }
        ]
      },
      "X-VA-File-Number": {
        "allOf": [
          { "description": "veteran's file number" },
          { "$ref": "#/definitions/nonBlankStringMaxLength9" }
        ]
      },
      "X-VA-Service-Number": {
        "allOf": [
          {"description": "veteran's service number"},
          {"$ref": "#/definitions/nonBlankStringMaxLength9"}
        ]
      },
      "X-VA-Insurance-Policy-Number": {
        "allOf": [
          { "description": "veteran's insurance policy number" },
          { "$ref": "#/definitions/nonBlankStringMaxLength18" }
        ]
      },
      "X-Consumer-Username": {
        "allOf": [
          { "description": "Consumer User Name (passed from Kong)" },
          { "$ref": "#/definitions/nonBlankString" }
        ]
      },
      "nonBlankString": {
        "type": "string",
        "pattern": "[^ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]",
        "$comment": "The pattern used ensures that a string has at least one non-whitespace character. The pattern comes from JavaScript's \\s character class. \"\\s Matches a single white space character, including space, tab, form feed, line feed, and other Unicode spaces. Equivalent to [ \\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff].\": https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes  We are using simple character classes at JSON Schema's recommendation: https://tools.ietf.org/html/draft-handrews-json-schema-validation-01#section-4.3"
      },
      "nonBlankStringMaxLength18": { "allOf": [ { "$ref": "#/definitions/nonBlankString" }, { "maxLength": 18 } ] },
      "nonBlankStringMaxLength9": { "allOf": [ { "$ref": "#/definitions/nonBlankString" }, { "maxLength": 9 } ] },
      "nonBlankStringMaxLength1": { "allOf": [ { "$ref": "#/definitions/nonBlankString" }, { "maxLength": 1 } ] },
      "date": { "type": "string", "pattern": "^[0-9]{4}(-[0-9]{2}){2}$" }
    }
  };

  // Fix rails-jsonschema-form not interpreting some header defs correctly
  for (const d in headerSchema['definitions']) {
    if ( /^X-/.test(d) ) {
      headerSchema['definitions'][d]['type'] = 'string';
    }
  }

  let schema = <%=raw @schema %>;
  // Combine header & form data fields together
  schema['definitions'] = {...headerSchema['definitions'], ...schema['definitions'] };

  // Force header fields to top of form
  schema['definitions']['hlrCreate']['properties'] = {
    ...{'apikey': {type: 'string', default: "<%= @apikey %>"}},
    ...{'hlrCreateParameters': {"$ref": "#/definitions/hlrCreateParameters"}},
    ...schema['definitions']['hlrCreate']['properties']
  };

  schema['definitions']['hlrCreate']['required'].push('apikey');

  // Add/fix fields
  schema['definitions']['nonBlankStringMaxLength140']['type'] = 'string';

  schema['definitions']['hlrCreateDataAttributes']['oneOf'][0]['title'] = 'Not requesting Informal Conference'
  schema['definitions']['hlrCreateDataAttributes']['oneOf'][1]['title'] = 'Requesting Informal Conference'

  // Set defaults for single-element enums
  schema['definitions']['hlrCreateData']['properties']['type']['default'] = 'higherLevelReview';
  schema['definitions']['hlrCreateContestableIssue']['properties']['type']['default'] = 'contestableIssue';

  const uiSchema = {
    hlrCreateParameters: {
      'X-VA-Birth-Date': {"ui:widget": 'date'}
    },
    included: {
      items: {
        attributes: {
          'decisionDate': {'ui:widget': 'date'}
        }
      }
    }
  };

  const log = (type) => console.log.bind(console, type);
  const Form = JSONSchemaForm.default;

  class SchemaForm extends React.Component {
    constructor(props) {
      super(props)
      this.state = {
        form: null
      }
      this.onSubmit = this.onSubmit.bind(this)
    }

    onSubmit = function ({formData}, e) {
      $.post(`${window.location.origin}/hlr/create`, formData, function (data) {
        console.log(data);
        window.location.href = `${window.location.origin}/hlr/show/${data.data.id}`
      })
    }

    render() {
      return (
        <Form schema={schema}
              uiSchema={uiSchema}
              onSubmit={this.onSubmit}
              method='post'
              action={`${window.location.pathname}/submit`}
              ref={(form) => this.state.form = form}
              onError={log("errors")}/>
      );
    }
  }

  ReactDOM.render(
    <SchemaForm/>,
    document.getElementById('root')
  );
</script>
